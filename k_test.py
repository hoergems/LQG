import numpy as np
from numpy import linalg

class KTest:
    def __init__(self):
        A = np.array([[1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [0.0, 1.0, 0.0, 5.0, 0.0, 0.0],
                      [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                      [0.0, 2.0, 0.0, 1.0, 0.0, 0.0],
                      [0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]])
        B = np.array([[1.0, 0.0, 0.0],
                      [0.0, 1.0, 0.5],
                      [1.0, 0.3, 1.0],
                      [0.34, 1.0, 1.0],
                      [1.0, 0.0, 1.0],
                      [0.0, 1.0, 0.0]])
        B = np.array([[1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [0.0, 1.0, 0.5, 0.0, 0.0, 0.0],
                      [1.0, 0.3, 1.0, 0.0, 0.0, 0.0],
                      [0.34, 1.0, 1.0, 0.0, 0.0, 0.0],
                      [1.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                      [0.0, 1.0, 0.0, 0.0, 0.0, 0.0]])
        C = 500.0 * np.array([[1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                              [0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                              [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                              [0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
                              [0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
                              [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]])
        
        D = np.array([[1.0, 0.0, 0.0],
                      [0.0, 1.0, 0.0],
                      [0.0, 0.0, 1.0]])
        D = np.identity(6)
        
        As = [A for i in xrange(10)]
        Bs = [B for i in xrange(10)]
        
        Ls = self.compute_gain(As, Bs, C, D, 10)
        print Ls[0]
        
    def compute_gain(self, A, B, C, D, l):
        S = np.copy(C)
        A = A[0:l][::-1]
        B = B[0:l][::-1]    
        Ls = []   
        for i in xrange(l):                    
            L = -np.dot(linalg.inv(np.dot(B[i].T, np.dot(S, B[i])) + D), np.dot(B[i].T, np.dot(S, A[i])))
            Ls.append(L)
            S = C + np.dot(A[i].T, np.dot(S, A[i])) + np.dot(A[i].T, np.dot(S, np.dot(B[i], L))) 
            
        Ls = Ls[::-1]         
        return Ls


if __name__ == "__main__":
    KTest()